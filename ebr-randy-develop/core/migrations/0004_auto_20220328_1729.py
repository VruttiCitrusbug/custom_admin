# Generated by Django 3.2.12 on 2022-03-28 11:59

import ckeditor.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_alter_reviewcategory_slug'),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('meta_title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', ckeditor.fields.RichTextField()),
                ('summary_1', models.TextField()),
                ('summary_2', models.TextField()),
                ('summary_3', models.TextField()),
                ('summary_4', models.TextField()),
                ('status', models.CharField(choices=[('Published', 'Published'), ('Pending Review', 'Pending Review'), ('Draft', 'Draft')], default='Draft', max_length=50)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='review_featured_images/')),
                ('youtube_video', models.CharField(max_length=80)),
                ('publish_date', models.DateField()),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('brands', models.ManyToManyField(db_index=True, related_name='review_brand', to='core.ReviewBrand')),
                ('categories', models.ManyToManyField(db_index=True, related_name='review_category', to='core.ReviewCategory')),
                ('create_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.user')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'db_table': 'review',
            },
        ),
        migrations.CreateModel(
            name='ReviewSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('bike_class', models.CharField(blank=True, max_length=200, null=True)),
                ('frame_type', models.CharField(blank=True, max_length=200, null=True)),
                ('frame', models.CharField(blank=True, max_length=200, null=True)),
                ('weight', models.CharField(blank=True, max_length=200, null=True)),
                ('load_capacity', models.CharField(blank=True, max_length=200, null=True)),
                ('suspension', models.CharField(blank=True, max_length=200, null=True)),
                ('fork', models.CharField(blank=True, max_length=200, null=True)),
                ('rear_shock', models.CharField(blank=True, max_length=200, null=True)),
                ('wheel_size', models.CharField(blank=True, max_length=200, null=True)),
                ('front_wheel', models.CharField(blank=True, max_length=200, null=True)),
                ('rear_wheel', models.CharField(blank=True, max_length=200, null=True)),
                ('front_hub', models.CharField(blank=True, max_length=200, null=True)),
                ('rear_hub', models.CharField(blank=True, max_length=200, null=True)),
                ('tires', models.CharField(blank=True, max_length=200, null=True)),
                ('gears', models.CharField(blank=True, max_length=200, null=True)),
                ('shift_levers', models.CharField(blank=True, max_length=200, null=True)),
                ('front_derailleur', models.CharField(blank=True, max_length=200, null=True)),
                ('crankset', models.CharField(blank=True, max_length=200, null=True)),
                ('rear_derailleur', models.CharField(blank=True, max_length=200, null=True)),
                ('electronic_shifting', models.CharField(blank=True, max_length=200, null=True)),
                ('igh', models.CharField(blank=True, max_length=200, null=True)),
                ('cvt', models.CharField(blank=True, max_length=200, null=True)),
                ('cassette', models.CharField(blank=True, max_length=200, null=True)),
                ('chainring', models.CharField(blank=True, max_length=200, null=True)),
                ('belt_drive', models.CharField(blank=True, max_length=200, null=True)),
                ('headset', models.CharField(blank=True, max_length=200, null=True)),
                ('stem', models.CharField(blank=True, max_length=200, null=True)),
                ('handlebar', models.CharField(blank=True, max_length=200, null=True)),
                ('grips', models.CharField(blank=True, max_length=200, null=True)),
                ('seatpost', models.CharField(blank=True, max_length=200, null=True)),
                ('seatpost_diameter', models.CharField(blank=True, max_length=200, null=True)),
                ('saddle', models.CharField(blank=True, max_length=200, null=True)),
                ('pedals', models.CharField(blank=True, max_length=200, null=True)),
                ('brake_type', models.CharField(blank=True, max_length=200, null=True)),
                ('front_brake', models.CharField(blank=True, max_length=200, null=True)),
                ('rear_brake', models.CharField(blank=True, max_length=200, null=True)),
                ('motor_type', models.CharField(blank=True, max_length=200, null=True)),
                ('motor', models.CharField(blank=True, max_length=200, null=True)),
                ('additional_motors', models.CharField(blank=True, max_length=200, null=True)),
                ('motor_nominal_output', models.CharField(blank=True, max_length=200, null=True)),
                ('display', models.CharField(blank=True, max_length=200, null=True)),
                ('smart_bike', models.CharField(blank=True, max_length=200, null=True)),
                ('theft_gps', models.CharField(blank=True, max_length=200, null=True)),
                ('battery_watt_hours', models.CharField(blank=True, max_length=200, null=True)),
                ('battery', models.CharField(blank=True, max_length=200, null=True)),
                ('charger', models.CharField(blank=True, max_length=200, null=True)),
                ('headlight', models.CharField(blank=True, max_length=200, null=True)),
                ('taillight', models.CharField(blank=True, max_length=200, null=True)),
                ('fenders', models.CharField(blank=True, max_length=200, null=True)),
                ('front_rack', models.CharField(blank=True, max_length=200, null=True)),
                ('rear_rack', models.CharField(blank=True, max_length=200, null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_specification_review', to='core.review')),
            ],
            options={
                'verbose_name': 'Review Specification',
                'verbose_name_plural': 'Review Specifications',
                'db_table': 'review_specification',
            },
        ),
        migrations.CreateModel(
            name='ReviewGalley',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='review_galley')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_galley_review', to='core.review')),
            ],
            options={
                'verbose_name': 'Review Galley',
                'verbose_name_plural': 'Review Galleys',
                'db_table': 'review_galley',
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['id'], name='review_id_ea7b6f_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['name'], name='review_name_629316_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['slug'], name='review_slug_7c156c_idx'),
        ),
    ]
